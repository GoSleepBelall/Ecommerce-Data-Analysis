# -*- coding: utf-8 -*-
"""Exploratory Data Analysis.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1drgfikuIHHHZ_bDsJspeE_blLtDH0jTN
"""

import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
import numpy as np
import json


plt.style.use('seaborn-v0_8-pastel')
sns.set_palette("pastel")

# Get the current color palette
current_palette = plt.rcParams['axes.prop_cycle'].by_key()['color']

# Plot the colors in the palette
sns.palplot(current_palette)
plt.title("Current Color Palette")
plt.show()

"""#Data Reading
We've already cleaned the dataset and now it's in the CSV format.
"""

data = pd.read_csv('/content/cleaned_datatset_952_rows.csv')
data.head()

print(np.shape(data))
# Get the data types of all columns
print(data.dtypes)

"""# Exploratory Data Analysis
In this module we will be doing EDA and exploring multiple features during the process, It is also expected to derive and transform new variables during the process.

## Univariate Analysis
We will explore each and every approriate feature and create appropriate graphs and charts accordingly.

### Age:
The Age column is a numerical column, thus it can be visualized using histogram to have an idea of frequency of ages in different ranges:
"""

plt.hist(data['Age'])
plt.title('Age Distribution')
plt.xlabel('Age')
plt.ylabel('Frequency')
plt.show()

"""#### Age Group:
Although, Age can be visualized appropriately using Histogram, but still a better way of visualizing age would be by deriving a new column called **Age Group**, The graph shows better insights about age.
We devided Age into 5 Age groups and analyzed that **Adults** have the highest frequency followed by **Senior** category.
"""

bins = [0, 12, 19, 35, 60, 81]
labels = ['Child', 'Teenager', 'Young Adult', 'Adult', 'Senior']

# Create a new 'Age Group' column
data['Age Group'] = pd.cut(data['Age'], bins=bins, labels=labels, right=False)

# Count the occurrences of each age group
age_group_counts = data['Age Group'].value_counts()

plt.bar(age_group_counts.index, age_group_counts.values)
plt.xlabel('Age Group')
plt.ylabel('Count')
plt.title('Distribution of Age Groups')
plt.show()#

"""### Gender:
The gender is a categorical variable, and on exploring it appeared to have 4 categories with **Others** being the most occuring.
"""

gender_counts = data['Gender'].value_counts()

plt.figure(figsize=(10, 4))

# Bar chart on the first subplot
plt.subplot(1, 2, 1)
plt.bar(gender_counts.index, gender_counts.values)
plt.xlabel('Gender')
plt.ylabel('Count')
plt.title('Distribution of Gender (Bar Chart)')

# Pie chart on the second subplot
plt.subplot(1, 2, 2)
plt.pie(gender_counts.values, labels=gender_counts.index, autopct='%1.1f%%')
plt.title('Distribution of Gender (Pie Chart)')


plt.tight_layout()
plt.show()

"""### Income Level
The income level is a categorical variable thus, It can be Visualize using Bar and Pie chart. It is analyzed that Income Level have 4 categories:
- High
- Medium
- Low
- Hidden

with **Medium** having the highest frequency.
"""

income_level_counts = data['Income_Level'].value_counts()

plt.figure(figsize=(10, 4))


plt.subplot(1, 2, 1)
plt.bar(income_level_counts.index, income_level_counts.values)
plt.xlabel('Income Level')
plt.ylabel('Count')
plt.title('Distribution of Income Level (Bar Chart)')

plt.subplot(1, 2, 2)
plt.pie(income_level_counts.values, labels=income_level_counts.index, autopct='%1.1f%%')
plt.title('Distribution of Income Level (Pie Chart)')

plt.tight_layout()
plt.show()

"""### Purchase Date:
There's no way directly to explore Purchase Date, because of the extensive diversity in the uniquness of dates. Thus, We need to reduce the uniquness by only catering the month and Year properties of the date. By doing so, We can easily explore the trends over time.
It can be seen that there are no specific trends with the passage of time, however there are few spikes throughout the time.
"""

data['Purchase_Date'] = pd.to_datetime(data['Purchase_Date'])

# Create a new column with only month and year
data['Purchase_Date_Month_Year'] = data['Purchase_Date'].dt.to_period('M')

# Count the occurrences of each month and year
purchase_date_counts = data['Purchase_Date_Month_Year'].value_counts().sort_index()
# Plot the trends over time
plt.figure(figsize=(12, 6))
plt.plot(purchase_date_counts.index.astype(str), purchase_date_counts.values, marker='o')
plt.xlabel('Month and Year')
plt.ylabel('Number of Purchases')
plt.title('Number of Purchases Over Time')
plt.xticks(rotation=45, ha='right')
plt.show()

"""#### Sales Frequency per year
This graph is shows the ammount of purchases done in every year. We can see that **2022** have the maximum number of sales.

"""

data['Sales_Frequence_per_year'] = data['Purchase_Date'].dt.year
purchase_date_counts = data['Sales_Frequence_per_year'].value_counts().sort_index()
# Create a bar chart
plt.bar(purchase_date_counts.index, purchase_date_counts.values)
plt.xlabel('Year')
plt.ylabel('Frequency')
plt.title('Sales Frequency per Year')
plt.xticks(purchase_date_counts.index)          # Set x-axis ticks as integers
plt.show()

"""#### Sales Frequency per Month
This graph shows the ammount of purchases done in every month. We can see that **January & June** have the maximum number of sales.

**NOTE:** This is not the variable present in the dataset earlier. That Purchase frequency per month is of an indvidual customer, This is total sales frequency per month.
"""

data['Sales_Frequency_per_Month'] = data['Purchase_Date'].dt.month
month_counts = data['Sales_Frequency_per_Month'].value_counts().sort_index()

# Create a bar chart
plt.bar(month_counts.index, month_counts.values)
plt.xlabel('Month')
plt.ylabel('Frequency')
plt.title('Sales Frequency per Months')
plt.xticks(month_counts.index)          # Set x-axis ticks as integers
plt.show()

"""### Product Category:
Product Category is a categorical variable defining the categories of products having 4 categories with **Electronics** being the dominant among them.
"""

product_category_counts = data['Product_Category'].value_counts()

plt.figure(figsize=(10, 4))

plt.subplot(1, 2, 1)
plt.bar(product_category_counts.index, product_category_counts.values)
plt.xlabel('Product Category')
plt.ylabel('Count')
plt.title('Distribution of Product Category (Bar Chart)')

plt.subplot(1, 2, 2)
plt.pie(product_category_counts.values, labels=product_category_counts.index, autopct='%1.1f%%')
plt.title('Distribution of Product Category (Pie Chart)')

plt.tight_layout()
plt.show()

"""### Brand:
We dont have any information about the Brand details but it have 4 categories as far as we know with **Brand_C** containing the most items.
"""

brand_counts = data['Brand'].value_counts()

plt.figure(figsize=(10, 4))

plt.subplot(1, 2, 1)
plt.bar(brand_counts.index, brand_counts.values)
plt.xlabel('Brand')
plt.ylabel('Count')
plt.title('Distribution of Brand (Bar Chart)')

plt.subplot(1, 2, 2)
plt.pie(brand_counts.values, labels=brand_counts.index, autopct='%1.1f%%')
plt.title('Distribution of Brand (Pie Chart)')

plt.tight_layout()
plt.show()

"""### Purchase Amount
Let's explore Purchase Amount using Histogram with a Density kernel for better visualization.
"""

sns.histplot(data['Purchase_Amount'], kde=True)
plt.xlabel('Purchase Amount')
plt.ylabel('Frequency')
plt.title('Distribution of Purchase Amount')
plt.show()

"""#### Product Range:
The Purchase Amount can be further explored by transforming the product into a range thus, we've distributed the products into three categories:
- **Cheap (0-100)**
- **Average (100-300)**
- **Expensive (300-500)**

we can see that Average priced range products dominate the dataset.
"""

data['Product Range'] = pd.cut(data['Purchase_Amount'], bins=[-1, 100, 300, 500], labels=['Cheap', 'Average', 'Expensive'])

product_range_counts = data['Product Range'].value_counts()

plt.figure(figsize=(10, 4))

plt.subplot(1, 2, 1)
plt.bar(product_range_counts.index, product_range_counts.values)
plt.xlabel('Product Range')
plt.ylabel('Count')
plt.title('Distribution of Product Range (Bar Chart)')

plt.subplot(1, 2, 2)
plt.pie(product_range_counts.values, labels=product_range_counts.index, autopct='%1.1f%%')
plt.title('Distribution of Product Range (Pie Chart)')

plt.tight_layout()
plt.show()

"""### Average Spending Per Purchase
We can see that on average a customer spend 50$ on average purchase.
"""

sns.histplot(data['Average_Spending_Per_Purchase'], kde=True)
plt.xlabel('Distribution of Spending')
plt.ylabel('Frequency')
plt.title('Average Spending of a Customer per purchase')
plt.show()

"""### Brand Affinity Score
We've seen that brand affinity Score is not categorical as it have floating values as well, so a histogram would be preffered over a barchart
"""

data['Brand_Affinity_Score'].value_counts()

sns.histplot(data['Brand_Affinity_Score'], kde=True)
plt.xlabel('Brand Affinity Score')
plt.ylabel('Frequency')
plt.title('Distribution of Brand Affinity Score')
plt.show()

"""### Product Category Preferences
We can see that dataset is divided into Three preferences, with Low preference Sales dominating the Data.
"""

product_category_preferences = data['Product_Category_Preferences'].value_counts().sort_index()

plt.bar(product_category_preferences.index, product_category_preferences.values)
plt.xlabel('Product Category')
plt.ylabel('Frequency')
plt.title('Frequency Count of Product Category Preferences')
plt.xticks(product_category_preferences.index)          # Set x-axis ticks as integers
plt.show()

"""### Season
It can be seen that all 4 Seasons dataset is given, having:
- Summer
- Autumn
- Winter
- Fall

with **Fall** having the highest frequency.
"""

season_counts = data['Season'].value_counts()
plt.bar(season_counts.index, season_counts.values)
plt.xlabel('Season')
plt.ylabel('Frequency')
plt.title('Frequency Count of Season')
plt.xticks(season_counts.index)          # Set x-axis ticks as integers
plt.show()

"""### Month
On exploring the Month variable we can see that June have the highest frequency.

**NOTE:** This is not the Sales or Purchase frequency in a month, We have no information about the introduction of this variable, This can be registeration, Manufacturing month of product.
"""

month_counts = data['Month'].value_counts().sort_index()

# Create a bar chart
plt.bar(month_counts.index, month_counts.values)
plt.xlabel('Month')
plt.ylabel('Frequency')
plt.title('Frequency Count of Months')
plt.xticks(month_counts.index)          # Set x-axis ticks as integers
plt.show()

"""### Year
On exploring the Year variable we can see that **1998** have the highest frequency.

**NOTE:** This is not the Sales or Purchase frequency in a Year, We have no information about the introduction of this variable, This can be registeration/Manufacturing Year of product.
"""

year_count = data['Year'].value_counts().sort_index()

# Create a bar chart
plt.figure(figsize=(12, 6))
plt.bar(year_count.index, year_count.values)
plt.xlabel('Year')
plt.ylabel('Frequency')
plt.title('Frequency Count of Year')
plt.xticks(year_count.index)          # Set x-axis ticks as integers
plt.xticks(rotation=45, ha='right')
plt.show()

"""## Save Transformed File
Now that we've created 5 new variables:
- Age Group
- Purchase Date Month Year (contains only Month and Year from Purchase Date)
- Sales Frequency per Year
- Sales Frequency per Month
- Product Range

So, It's time to save this new file for better precision and accuracy in clustering.
"""

print(np.shape(data))
print(data.dtypes)
data.to_csv('transformed_datatset_22_variables.csv', index=False)

"""## Bivariate Analysis

### Age Group vs Purchase Amount
This is a very important analysis in understanding spending patterns of different age group and if there are any specific differences.
On analyzing, we can observe that purchase amounts vary among age groups, with some showing more diverse spending behaviors. The box plot reveals no outliers, indicating consistent purchase amounts within each age group. This suggests uniform spending behavior without extreme highs or lows.
"""

sns.boxplot(data=data, x='Age Group', y='Purchase_Amount')
plt.title('Age Group vs Purchase Amount')
plt.xticks(rotation=45)
plt.show()

"""Lets draw heatmap for a different visualization, We will create 4 bins from quantiles for numerical column "purchase amount"
"""

data['Purchase_Amount_Bins'] = pd.qcut(data['Purchase_Amount'], q=4, duplicates='drop') # Create 4 quantile bins

# Creating a pivot table for the heatmap
pivot_table = data.pivot_table(index='Age Group', columns='Purchase_Amount_Bins', aggfunc='size', fill_value=0)

#heatmap
plt.figure(figsize=(12, 8))
sns.heatmap(pivot_table, annot=True, fmt='d')
plt.title("Heatmap of Purchase Amount Frequency by Age Group")
plt.ylabel('Age Group')
plt.xlabel('Purchase Amount Bins')
plt.show()

"""### Gender vs Product Category
This analysis is very important to understand if there is any prefferance on products based on customer's gender. Upon analyzing we can see that the purchases of Electronics dominate the Dataset in all categories.
"""

ct = pd.crosstab(data['Gender'], data['Product_Category'])
ct

ct.plot(kind='bar', figsize=(10, 5))
plt.title('Gender vs Product Category Preferences')
plt.show()

"""Let's try a different visualization for this relation"""

plt.figure(figsize=(12, 8))
sns.heatmap(ct, annot=True, fmt='d')
plt.title("Heatmap of Gender vs Product Category")
plt.ylabel('Gender')
plt.xlabel('Product Category')
plt.show()

"""### Income Level vs Average Spending per purchase
This analysis will provide insights into how income level might influence spending habits. Upon analysing, we can see that High Income people have higher span of people who tends to spend above average (Bigger upper whisker) and Hidden group have the highest Median of Average Spending.
"""

sns.boxplot(data=data, x='Income_Level', y='Average_Spending_Per_Purchase')
plt.title('Income Level vs Average Spending Per Purchase')
plt.show()

"""### Brand Affinity Score vs Brand
The bar chart below depicts the average Brand Affinity Score for each Brand. This analysis is useful for understanding if certain brands are favored more.
"""

sns.boxplot(data=data, x='Brand', y='Brand_Affinity_Score')
plt.title('Brand Affinity Score vs Brand')
plt.show()

"""### Purchase Frequency Per Month vs Season
below illustrations illustrates the average Sales frequency per month for each season. This visualization helps in identifying seasonal trends in sales frequency, revealing whether certain seasons experience more frequent sales than others. Upon analyzing, We can see that **Fall** have maximum Sales Average with **Winter** and **Hidden** having some skewed distributions (greater upper whisker)
"""

season_average = data.groupby('Season')['Sales_Frequency_per_Month'].mean().sort_values(ascending=False)

plt.figure(figsize=(12, 6))

plt.subplot(1, 2, 1)
sns.boxplot(data=data, x='Season', y='Sales_Frequency_per_Month', order=season_average.index)
plt.title('Sales Frequency Per Month vs Season (Boxplot)')

plt.subplot(1, 2, 2)
sns.barplot(x=season_average.index, y=season_average.values)
plt.title('Average Sales Frequency Per Month vs Season (Bar Chart)')
plt.ylabel('Average Sales Frequency')

plt.tight_layout()
plt.show()

"""Month/Year of Purchase and Product Category: To analyze trends over time in different product categories.

### Age Group and Product Category
This analysis is important to see if certain age groups prefer specific products and we can see:
- Young Adult prefferes clothing over everything
- Adults enjoy buying books and electronics
- Senior preffer Electronics items
"""

ct = pd.crosstab(data['Age Group'], data['Product_Category'])
ct

ct.plot(kind='bar')
plt.title('Age Group vs Product Category')
plt.show()

"""Let's explore a different visualization for better descriptive stats of the same relation:"""

plt.figure(figsize=(12, 8))
sns.heatmap(ct, annot=True, fmt='d')
plt.title("Heatmap of Age Group vs Product Category")
plt.ylabel('Age Group')
plt.xlabel('Product Category')
plt.show()

"""### Product Category and Product Range
This analysis is important to understand the price range of every product category.
"""

product_category_product_range = data.groupby(['Product_Category', 'Product Range']).size().unstack()
product_category_product_range

product_category_product_range.plot(kind='bar', figsize=(10, 5))
plt.xlabel('Product Category')
plt.ylabel('Count')
plt.title('Product Category vs Product Range')
plt.show()

"""Let's explore a different visualization for better descriptive stats of the same relation:"""

plt.figure(figsize=(12, 8))
sns.heatmap(ct, annot=True, fmt='d')
plt.title("Heatmap of Product Category vs Product Range")
plt.ylabel('Age group')
plt.xlabel('Product Category')
plt.show()

"""## Temporal Analysis
It is important to understand the trends with respect to time based on different variables.

### Sales trends with respect to Age Group
On exploring the trends based on Age group we can have following conclusions:
- Teens have very low and rare occurances of sales.
- Young Adult don't have any specific trends, although it have a few Spikes in 2022.
- Adults have on average 5-10 sales.
- Senior shows a trend in 2020, with relatively lower sales in 2021 as compared to 2022 with a few spikes shown in 2022 as well.
"""

ct = pd.crosstab(data['Purchase_Date_Month_Year'], data['Age Group'])

ct.plot(kind='line', figsize=(12,6))
plt.title('Sales trends with respect to Age Group')

"""Let's make their multiple facets to get better visualization and understanding"""

# Get a list of unique product categories
age_groups = ct.columns

fig, axes = plt.subplots(nrows=2, ncols=2, figsize=(12, 8), sharey=True, sharex=True)

# Plot each category on a separate subplot
ct['Teenager'].plot(kind='line', marker='o', ax=axes[0, 0])
axes[0, 0].set_title('Teenager Purchases over time')
axes[0, 0].tick_params(axis='x', rotation=45)

ct['Young Adult'].plot(kind='line', marker='o', ax=axes[0, 1])
axes[0, 1].set_title('Young Adult Purchases over time')
axes[0, 1].tick_params(axis='x', rotation=45)

ct['Adult'].plot(kind='line', marker='o', ax=axes[1, 0])
axes[1, 0].set_title('Adult Purchases over time')
axes[1, 0].tick_params(axis='x', rotation=45)

ct['Senior'].plot(kind='line', marker='o', ax=axes[1, 1])
axes[1, 1].set_title('Senior Purchases over time')
axes[1, 1].tick_params(axis='x', rotation=45)


plt.tight_layout()
plt.show()

"""### Sales trends with respect to Brands
On exploring the Product Category trends, we can have see that relatively Brand_C show dominance in sales, however there are spikes in sales in all brands from time to time.
"""

ct = pd.crosstab(data['Purchase_Date_Month_Year'], data['Brand'])

ct.plot(kind='line', figsize=(12,6))
plt.title('Sales trends with respect to Product Category')

"""Let's make their multiple facets to get better visualization and understanding"""

fig, axes = plt.subplots(nrows=2, ncols=2, figsize=(12, 8), sharey=True, sharex=True)

# Plot each category on a separate subplot
ct['Brand_A'].plot(kind='line', marker='o', ax=axes[0, 0])
axes[0, 0].set_title('Brand A Purchases over time')
axes[0, 0].tick_params(axis='x', rotation=45)

ct['Brand_B'].plot(kind='line', marker='o', ax=axes[0, 1])
axes[0, 1].set_title('Brand B Purchases over time')
axes[0, 1].tick_params(axis='x', rotation=45)

ct['Brand_C'].plot(kind='line', marker='o', ax=axes[1, 0])
axes[1, 0].set_title('Brand C Purchases over time')
axes[1, 0].tick_params(axis='x', rotation=45)

ct['Hidden'].plot(kind='line', marker='o', ax=axes[1, 1])
axes[1, 1].set_title('Hidden Purchases over time')
axes[1, 1].tick_params(axis='x', rotation=45)


plt.tight_layout()
plt.show()

"""### Sales trends with respect to Product Category
On exploring the Product Category trends, we can have see that None of the category show any specific trends, however there are spikes in sales in all categories time to time.
"""

ct = pd.crosstab(data['Purchase_Date_Month_Year'], data['Product_Category'])

ct.plot(kind='line', figsize=(12,6))
plt.title('Sales trends with respect to Age Group')

"""Let's make their multiple facets to get better visualization and understanding"""

# Get a list of unique product categories
categories = ct.columns

fig, axes = plt.subplots(nrows=2, ncols=2, figsize=(12, 8), sharey=True, sharex=True)

# Plot each category on a separate subplot
ct['Books'].plot(kind='line', marker='o', ax=axes[0, 0])
axes[0, 0].set_title('Books Category Sales over time')
axes[0, 0].tick_params(axis='x', rotation=45)

ct['Clothing'].plot(kind='line', marker='o', ax=axes[0, 1])
axes[0, 1].set_title('Clothing Category Sales over time')
axes[0, 1].tick_params(axis='x', rotation=45)

ct['Electronics'].plot(kind='line', marker='o', ax=axes[1, 0])
axes[1, 0].set_title('Electronics Category Sales over time')
axes[1, 0].tick_params(axis='x', rotation=45)

ct['Hidden'].plot(kind='line', marker='o', ax=axes[1, 1])
axes[1, 1].set_title('Hidden Category Sales over time')
axes[1, 1].tick_params(axis='x', rotation=45)


plt.tight_layout()
plt.show()

"""### Sales trends with respect to Gender
On exploring the Gender trends, we can have see that None of the gender show any specific trends, however there are spikes in sales in all gender categories time to time.
"""

ct = pd.crosstab(data['Purchase_Date_Month_Year'], data['Gender'])

ct.plot(kind='line', figsize=(12,6))
plt.title('Sales trends with respect to Gender')

"""Let's make their multiple facets to get better visualization and understanding"""

# Get a list of unique product categories
categories = ct.columns

fig, axes = plt.subplots(nrows=2, ncols=2, figsize=(12, 8), sharey=True, sharex=True)

# Plot each category on a separate subplot
ct['Female'].plot(kind='line', marker='o', ax=axes[0, 0])
axes[0, 0].set_title('Female Sales over time')
axes[0, 0].tick_params(axis='x', rotation=45)

ct['Male'].plot(kind='line', marker='o', ax=axes[0, 1])
axes[0, 1].set_title('Male Sales over time')
axes[0, 1].tick_params(axis='x', rotation=45)

ct['Other'].plot(kind='line', marker='o', ax=axes[1, 0])
axes[1, 0].set_title('Other Sales over time')
axes[1, 0].tick_params(axis='x', rotation=45)

ct['Hidden'].plot(kind='line', marker='o', ax=axes[1, 1])
axes[1, 1].set_title('Hidden Sales over time')
axes[1, 1].tick_params(axis='x', rotation=45)


plt.tight_layout()
plt.show()

"""### Sales trends with respect to Income Level
On exploring the Income Level trends, we can have see that Medium Level of the Income dominates the sales majorly, however there are spikes in sales in all income level categories from time to time.
"""

ct = pd.crosstab(data['Purchase_Date_Month_Year'], data['Income_Level'])

ct.plot(kind='line', figsize=(12,6))
plt.title('Sales trends with respect to Income Level')

"""Let's create the facets for better visualizations"""

# Get a list of unique product categories
level = ct.columns

fig, axes = plt.subplots(nrows=2, ncols=2, figsize=(12, 8), sharey=True, sharex=True)

# Plot each category on a separate subplot
ct['Low'].plot(kind='line', marker='o', ax=axes[0, 0])
axes[0, 0].set_title('Low Income Sales over time')
axes[0, 0].tick_params(axis='x', rotation=45)

ct['Medium'].plot(kind='line', marker='o', ax=axes[0, 1])
axes[0, 1].set_title('Medium Income Sales over time')
axes[0, 1].tick_params(axis='x', rotation=45)

ct['High'].plot(kind='line', marker='o', ax=axes[1, 0])
axes[1, 0].set_title('High Income Sales over time')
axes[1, 0].tick_params(axis='x', rotation=45)

ct['Hidden'].plot(kind='line', marker='o', ax=axes[1, 1])
axes[1, 1].set_title('Hidden Sales over time')
axes[1, 1].tick_params(axis='x', rotation=45)


plt.tight_layout()
plt.show()